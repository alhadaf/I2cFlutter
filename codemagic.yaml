workflows:
  ios_app_store:
    name: iOS App Store
    environment:
      flutter: stable
      vars:
        # === CHANGE THIS ===
        APP_DIR: "app"                      # Flutter project is in app subdirectory
        BUNDLE_ID: "com.joinmeister.silentprintbrowser"
        ASC_ISSUER_ID: "9b6f8519-694d-48a5-8b90-cd6c1debe0d3"
        ASC_KEY_ID: "6Y8XL8Q783"
        TEAM_ID: "YOUR_TEAM_ID"            # (optional) your Apple dev team id
      groups:
        # Store these in Codemagic → Environment variables (secure):
        # AUTH_KEY: App Store Connect API private key (contents)
        # CERTIFICATE_KEY: Apple Distribution private key (PEM)
        - apple_signing
    cache:
      cache_paths:
        - ~/.pub-cache
        - $HOME/Library/Caches/CocoaPods
        - $HOME/Library/Developer/Xcode/DerivedData
    scripts:
      - name: Diagnose repo layout
        script: |
          echo "CM_CLONE_DIR=$CM_CLONE_DIR"
          echo "APP_DIR=$APP_DIR"
          ls -la "$CM_CLONE_DIR" || true
          echo "Looking for pubspec.yaml:"
          find "$CM_CLONE_DIR" -maxdepth 4 -name pubspec.yaml -print || true

      - name: Install Flutter dependencies
        working_directory: $CM_CLONE_DIR/$APP_DIR
        script: |
          echo "Working directory: $(pwd)"
          echo "Looking for pubspec.yaml..."
          ls -la pubspec.yaml || echo "pubspec.yaml not found"
          ls -la || echo "Directory listing failed"
          test -f pubspec.yaml || { echo "❌ pubspec.yaml not found in $APP_DIR"; exit 1; }
          flutter pub get

      - name: Fetch iOS signing files (App Store)
        script: |
          app-store-connect fetch-signing-files "$BUNDLE_ID" \
            --create --type IOS_APP_STORE --platform IOS \
            --issuer-id "$ASC_ISSUER_ID" \
            --key-id "$ASC_KEY_ID" \
            --private-key @env:AUTH_KEY \
            --certificate-key @env:CERTIFICATE_KEY \
            --delete-stale-profiles

      - name: Initialize keychain & import certs
        script: |
          keychain initialize
          keychain add-certificates

      # If your iOS module uses pods:
      - name: Install CocoaPods (if present)
        working_directory: $CM_CLONE_DIR/$APP_DIR/ios
        script: |
          if [ -f "Podfile" ]; then
            gem install cocoapods --no-document || true
            pod repo update || true
            pod install
          else
            echo "No Podfile; skipping pods"
          fi

      # Option A: Build with Flutter (simplest)
      - name: Build IPA (Flutter)
        working_directory: $CM_CLONE_DIR/$APP_DIR
        script: |
          # With signing assets installed, Flutter will sign during export
          flutter build ipa --release

      # --- Option B (alternative): Build with xcode-project CLI ---
      # - name: Build IPA (Xcode)
      #   script: |
      #     xcode-project build-ipa \
      #       --workspace "$CM_CLONE_DIR/$APP_DIR/ios/Runner.xcworkspace" \
      #       --scheme "Runner" \
      #       --archive-method app-store \
      #       ${TEAM_ID:+--team-id "$TEAM_ID"}

    artifacts:
      - $CM_CLONE_DIR/$APP_DIR/build/ios/**/*.ipa
      - $CM_CLONE_DIR/$APP_DIR/build/ios/**/*.dSYM
      - $CM_CLONE_DIR/$APP_DIR/build/ios/archive/**/*.xcarchive

    publishing:
      email:
        recipients:
          - info@alimhanna.com
        notify:
          success: true
          failure: true